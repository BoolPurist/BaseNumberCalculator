id: NumberBaseConversionLibrary
language: CSharp
name:
  Default: NumberBaseConversionLibrary
qualifiedName:
  Default: NumberBaseConversionLibrary
type: Assembly
modifiers: {}
items:
- id: NumberBaseConversionLibrary
  commentId: N:NumberBaseConversionLibrary
  language: CSharp
  name:
    CSharp: NumberBaseConversionLibrary
    VB: NumberBaseConversionLibrary
  nameWithType:
    CSharp: NumberBaseConversionLibrary
    VB: NumberBaseConversionLibrary
  qualifiedName:
    CSharp: NumberBaseConversionLibrary
    VB: NumberBaseConversionLibrary
  type: Namespace
  assemblies:
  - NumberBaseConversionLibrary
  modifiers: {}
  items:
  - id: NumberBaseConversionLibrary.NumberBaseConverting
    commentId: T:NumberBaseConversionLibrary.NumberBaseConverting
    language: CSharp
    name:
      CSharp: NumberBaseConverting
      VB: NumberBaseConverting
    nameWithType:
      CSharp: NumberBaseConverting
      VB: NumberBaseConverting
    qualifiedName:
      CSharp: NumberBaseConversionLibrary.NumberBaseConverting
      VB: NumberBaseConversionLibrary.NumberBaseConverting
    type: Class
    assemblies:
    - NumberBaseConversionLibrary
    namespace: NumberBaseConversionLibrary
    source:
      remote:
        path: NumberBaseConversionLibrary/NumberBaseConverting.cs
        branch: master
        repo: https://github.com/BoolPurist/BaseNumberCalculator.git
      id: NumberBaseConverting
      path: ../NumberBaseConversionLibrary/NumberBaseConverting.cs
      startLine: 7
    syntax:
      content:
        CSharp: public static class NumberBaseConverting
        VB: Public Module NumberBaseConverting
    inheritance:
    - System.Object
    inheritedMembers:
    - System.Object.Equals(System.Object)
    - System.Object.Equals(System.Object,System.Object)
    - System.Object.GetHashCode
    - System.Object.GetType
    - System.Object.MemberwiseClone
    - System.Object.ReferenceEquals(System.Object,System.Object)
    - System.Object.ToString
    modifiers:
      CSharp:
      - public
      - static
      - class
      VB:
      - Public
      - Module
    items:
    - id: NumberBaseConversionLibrary.NumberBaseConverting.MaxBase
      commentId: P:NumberBaseConversionLibrary.NumberBaseConverting.MaxBase
      language: CSharp
      name:
        CSharp: MaxBase
        VB: MaxBase
      nameWithType:
        CSharp: NumberBaseConverting.MaxBase
        VB: NumberBaseConverting.MaxBase
      qualifiedName:
        CSharp: NumberBaseConversionLibrary.NumberBaseConverting.MaxBase
        VB: NumberBaseConversionLibrary.NumberBaseConverting.MaxBase
      type: Property
      assemblies:
      - NumberBaseConversionLibrary
      namespace: NumberBaseConversionLibrary
      source:
        remote:
          path: NumberBaseConversionLibrary/NumberBaseConverting.cs
          branch: master
          repo: https://github.com/BoolPurist/BaseNumberCalculator.git
        id: MaxBase
        path: ../NumberBaseConversionLibrary/NumberBaseConverting.cs
        startLine: 17
      summary: "\nDetermines the highest base for conversion numbers\n"
      example: []
      syntax:
        content:
          CSharp: public static int MaxBase { get; }
          VB: Public Shared ReadOnly Property MaxBase As Integer
        parameters: []
        return:
          type: System.Int32
          description: "\nGet-Accessors on the readonly field maxBase with the value 36 currently,\n"
      overload: NumberBaseConversionLibrary.NumberBaseConverting.MaxBase*
      modifiers:
        CSharp:
        - public
        - static
        - get
        VB:
        - Public
        - Shared
        - ReadOnly
    - id: NumberBaseConversionLibrary.NumberBaseConverting.NumberValueFromTextNumber(System.String,System.Int32)
      commentId: M:NumberBaseConversionLibrary.NumberBaseConverting.NumberValueFromTextNumber(System.String,System.Int32)
      language: CSharp
      name:
        CSharp: NumberValueFromTextNumber(String, Int32)
        VB: NumberValueFromTextNumber(String, Int32)
      nameWithType:
        CSharp: NumberBaseConverting.NumberValueFromTextNumber(String, Int32)
        VB: NumberBaseConverting.NumberValueFromTextNumber(String, Int32)
      qualifiedName:
        CSharp: NumberBaseConversionLibrary.NumberBaseConverting.NumberValueFromTextNumber(System.String, System.Int32)
        VB: NumberBaseConversionLibrary.NumberBaseConverting.NumberValueFromTextNumber(System.String, System.Int32)
      type: Method
      assemblies:
      - NumberBaseConversionLibrary
      namespace: NumberBaseConversionLibrary
      source:
        remote:
          path: NumberBaseConversionLibrary/NumberBaseConverting.cs
          branch: master
          repo: https://github.com/BoolPurist/BaseNumberCalculator.git
        id: NumberValueFromTextNumber
        path: ../NumberBaseConversionLibrary/NumberBaseConverting.cs
        startLine: 39
      summary: 'Gets the numeric value from a number as text. '
      example: []
      syntax:
        content:
          CSharp: public static int NumberValueFromTextNumber(string textNumber, int sourceBase)
          VB: Public Shared Function NumberValueFromTextNumber(textNumber As String, sourceBase As Integer) As Integer
        parameters:
        - id: textNumber
          type: System.String
          description: 'Number as a text is made of chars from 0-9,a-z and A-Z. '
        - id: sourceBase
          type: System.Int32
          description: 'Integer for the base the text number is based on. '
        return:
          type: System.Int32
          description: "\nNumeric value as integer based on the decimal number system.\nReturns -1 if the text number has at least one char with values above the <code data-dev-comment-type=\"paramref\" class=\"paramref\">sourceBase</code>.\nExample: With &quot;A4&quot; for <code data-dev-comment-type=\"paramref\" class=\"paramref\">textNumber</code> and 10 for <code data-dev-comment-type=\"paramref\" class=\"paramref\">sourceBase</code> returns -1,\nbecause A exits in number systems with a base of at least 11.\n"
      overload: NumberBaseConversionLibrary.NumberBaseConverting.NumberValueFromTextNumber*
      exceptions:
      - type: System.ArgumentNullException
        commentId: T:System.ArgumentNullException
        description: "\nOccurs if parameter <code data-dev-comment-type=\"paramref\" class=\"paramref\">textNumber</code> is null\n"
      - type: System.ArgumentOutOfRangeException
        commentId: T:System.ArgumentOutOfRangeException
        description: "\nOccurs if parameter <code data-dev-comment-type=\"paramref\" class=\"paramref\">sourceBase</code> is zero or smaller.\nOccurs if the parameter is greater that the value of <xref href=\"NumberBaseConversionLibrary.NumberBaseConverting.MaxBase\" data-throw-if-not-resolved=\"false\"></xref>.\n"
      - type: System.ArgumentException
        commentId: T:System.ArgumentException
        description: "\nOccurs if the <code data-dev-comment-type=\"paramref\" class=\"paramref\">textNumber</code> is an empty string or has a char with is not 0-9, a-z or A-Z.\n"
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
      references:
        NumberBaseConversionLibrary.NumberBaseConverting.MaxBase: 
        System.ArgumentNullException: 
        System.ArgumentOutOfRangeException: 
        System.ArgumentException: 
    - id: NumberBaseConversionLibrary.NumberBaseConverting.TextNumberFromNumberValue(System.Int32,System.Int32)
      commentId: M:NumberBaseConversionLibrary.NumberBaseConverting.TextNumberFromNumberValue(System.Int32,System.Int32)
      language: CSharp
      name:
        CSharp: TextNumberFromNumberValue(Int32, Int32)
        VB: TextNumberFromNumberValue(Int32, Int32)
      nameWithType:
        CSharp: NumberBaseConverting.TextNumberFromNumberValue(Int32, Int32)
        VB: NumberBaseConverting.TextNumberFromNumberValue(Int32, Int32)
      qualifiedName:
        CSharp: NumberBaseConversionLibrary.NumberBaseConverting.TextNumberFromNumberValue(System.Int32, System.Int32)
        VB: NumberBaseConversionLibrary.NumberBaseConverting.TextNumberFromNumberValue(System.Int32, System.Int32)
      type: Method
      assemblies:
      - NumberBaseConversionLibrary
      namespace: NumberBaseConversionLibrary
      source:
        remote:
          path: NumberBaseConversionLibrary/NumberBaseConverting.cs
          branch: master
          repo: https://github.com/BoolPurist/BaseNumberCalculator.git
        id: TextNumberFromNumberValue
        path: ../NumberBaseConversionLibrary/NumberBaseConverting.cs
        startLine: 144
      syntax:
        content:
          CSharp: public static string TextNumberFromNumberValue(int numericValue, int targetBase)
          VB: Public Shared Function TextNumberFromNumberValue(numericValue As Integer, targetBase As Integer) As String
        parameters:
        - id: numericValue
          type: System.Int32
        - id: targetBase
          type: System.Int32
        return:
          type: System.String
      overload: NumberBaseConversionLibrary.NumberBaseConverting.TextNumberFromNumberValue*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
references:
  System:
    name:
      CSharp:
      - name: System
        nameWithType: System
        qualifiedName: System
        isExternal: true
      VB:
      - name: System
        nameWithType: System
        qualifiedName: System
    isDefinition: true
    commentId: N:System
  System.Object:
    name:
      CSharp:
      - id: System.Object
        name: Object
        nameWithType: Object
        qualifiedName: System.Object
        isExternal: true
      VB:
      - id: System.Object
        name: Object
        nameWithType: Object
        qualifiedName: System.Object
        isExternal: true
    isDefinition: true
    parent: System
    commentId: T:System.Object
  System.Object.Equals(System.Object):
    name:
      CSharp:
      - id: System.Object.Equals(System.Object)
        name: Equals
        nameWithType: Object.Equals
        qualifiedName: System.Object.Equals
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Object
        name: Object
        nameWithType: Object
        qualifiedName: System.Object
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: System.Object.Equals(System.Object)
        name: Equals
        nameWithType: Object.Equals
        qualifiedName: System.Object.Equals
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Object
        name: Object
        nameWithType: Object
        qualifiedName: System.Object
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: System.Object
    commentId: M:System.Object.Equals(System.Object)
  System.Object.Equals(System.Object,System.Object):
    name:
      CSharp:
      - id: System.Object.Equals(System.Object,System.Object)
        name: Equals
        nameWithType: Object.Equals
        qualifiedName: System.Object.Equals
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Object
        name: Object
        nameWithType: Object
        qualifiedName: System.Object
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Object
        name: Object
        nameWithType: Object
        qualifiedName: System.Object
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: System.Object.Equals(System.Object,System.Object)
        name: Equals
        nameWithType: Object.Equals
        qualifiedName: System.Object.Equals
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Object
        name: Object
        nameWithType: Object
        qualifiedName: System.Object
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Object
        name: Object
        nameWithType: Object
        qualifiedName: System.Object
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: System.Object
    commentId: M:System.Object.Equals(System.Object,System.Object)
  System.Object.GetHashCode:
    name:
      CSharp:
      - id: System.Object.GetHashCode
        name: GetHashCode
        nameWithType: Object.GetHashCode
        qualifiedName: System.Object.GetHashCode
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: System.Object.GetHashCode
        name: GetHashCode
        nameWithType: Object.GetHashCode
        qualifiedName: System.Object.GetHashCode
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: System.Object
    commentId: M:System.Object.GetHashCode
  System.Object.GetType:
    name:
      CSharp:
      - id: System.Object.GetType
        name: GetType
        nameWithType: Object.GetType
        qualifiedName: System.Object.GetType
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: System.Object.GetType
        name: GetType
        nameWithType: Object.GetType
        qualifiedName: System.Object.GetType
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: System.Object
    commentId: M:System.Object.GetType
  System.Object.MemberwiseClone:
    name:
      CSharp:
      - id: System.Object.MemberwiseClone
        name: MemberwiseClone
        nameWithType: Object.MemberwiseClone
        qualifiedName: System.Object.MemberwiseClone
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: System.Object.MemberwiseClone
        name: MemberwiseClone
        nameWithType: Object.MemberwiseClone
        qualifiedName: System.Object.MemberwiseClone
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: System.Object
    commentId: M:System.Object.MemberwiseClone
  System.Object.ReferenceEquals(System.Object,System.Object):
    name:
      CSharp:
      - id: System.Object.ReferenceEquals(System.Object,System.Object)
        name: ReferenceEquals
        nameWithType: Object.ReferenceEquals
        qualifiedName: System.Object.ReferenceEquals
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Object
        name: Object
        nameWithType: Object
        qualifiedName: System.Object
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Object
        name: Object
        nameWithType: Object
        qualifiedName: System.Object
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: System.Object.ReferenceEquals(System.Object,System.Object)
        name: ReferenceEquals
        nameWithType: Object.ReferenceEquals
        qualifiedName: System.Object.ReferenceEquals
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Object
        name: Object
        nameWithType: Object
        qualifiedName: System.Object
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Object
        name: Object
        nameWithType: Object
        qualifiedName: System.Object
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: System.Object
    commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  System.Object.ToString:
    name:
      CSharp:
      - id: System.Object.ToString
        name: ToString
        nameWithType: Object.ToString
        qualifiedName: System.Object.ToString
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: System.Object.ToString
        name: ToString
        nameWithType: Object.ToString
        qualifiedName: System.Object.ToString
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: System.Object
    commentId: M:System.Object.ToString
  System.Int32:
    name:
      CSharp:
      - id: System.Int32
        name: Int32
        nameWithType: Int32
        qualifiedName: System.Int32
        isExternal: true
      VB:
      - id: System.Int32
        name: Int32
        nameWithType: Int32
        qualifiedName: System.Int32
        isExternal: true
    isDefinition: true
    parent: System
    commentId: T:System.Int32
  NumberBaseConversionLibrary.NumberBaseConverting.MaxBase*:
    name:
      CSharp:
      - id: NumberBaseConversionLibrary.NumberBaseConverting.MaxBase*
        name: MaxBase
        nameWithType: NumberBaseConverting.MaxBase
        qualifiedName: NumberBaseConversionLibrary.NumberBaseConverting.MaxBase
      VB:
      - id: NumberBaseConversionLibrary.NumberBaseConverting.MaxBase*
        name: MaxBase
        nameWithType: NumberBaseConverting.MaxBase
        qualifiedName: NumberBaseConversionLibrary.NumberBaseConverting.MaxBase
    isDefinition: true
    commentId: Overload:NumberBaseConversionLibrary.NumberBaseConverting.MaxBase
  NumberBaseConversionLibrary.NumberBaseConverting.MaxBase:
    commentId: P:NumberBaseConversionLibrary.NumberBaseConverting.MaxBase
  System.ArgumentNullException:
    commentId: T:System.ArgumentNullException
  System.ArgumentOutOfRangeException:
    commentId: T:System.ArgumentOutOfRangeException
  System.ArgumentException:
    commentId: T:System.ArgumentException
  System.String:
    name:
      CSharp:
      - id: System.String
        name: String
        nameWithType: String
        qualifiedName: System.String
        isExternal: true
      VB:
      - id: System.String
        name: String
        nameWithType: String
        qualifiedName: System.String
        isExternal: true
    isDefinition: true
    parent: System
    commentId: T:System.String
  NumberBaseConversionLibrary.NumberBaseConverting.NumberValueFromTextNumber*:
    name:
      CSharp:
      - id: NumberBaseConversionLibrary.NumberBaseConverting.NumberValueFromTextNumber*
        name: NumberValueFromTextNumber
        nameWithType: NumberBaseConverting.NumberValueFromTextNumber
        qualifiedName: NumberBaseConversionLibrary.NumberBaseConverting.NumberValueFromTextNumber
      VB:
      - id: NumberBaseConversionLibrary.NumberBaseConverting.NumberValueFromTextNumber*
        name: NumberValueFromTextNumber
        nameWithType: NumberBaseConverting.NumberValueFromTextNumber
        qualifiedName: NumberBaseConversionLibrary.NumberBaseConverting.NumberValueFromTextNumber
    isDefinition: true
    commentId: Overload:NumberBaseConversionLibrary.NumberBaseConverting.NumberValueFromTextNumber
  NumberBaseConversionLibrary.NumberBaseConverting.TextNumberFromNumberValue*:
    name:
      CSharp:
      - id: NumberBaseConversionLibrary.NumberBaseConverting.TextNumberFromNumberValue*
        name: TextNumberFromNumberValue
        nameWithType: NumberBaseConverting.TextNumberFromNumberValue
        qualifiedName: NumberBaseConversionLibrary.NumberBaseConverting.TextNumberFromNumberValue
      VB:
      - id: NumberBaseConversionLibrary.NumberBaseConverting.TextNumberFromNumberValue*
        name: TextNumberFromNumberValue
        nameWithType: NumberBaseConverting.TextNumberFromNumberValue
        qualifiedName: NumberBaseConversionLibrary.NumberBaseConverting.TextNumberFromNumberValue
    isDefinition: true
    commentId: Overload:NumberBaseConversionLibrary.NumberBaseConverting.TextNumberFromNumberValue
  NumberBaseConversionLibrary.NumberBaseConverting:
    name:
      CSharp:
      - id: NumberBaseConversionLibrary.NumberBaseConverting
        name: NumberBaseConverting
        nameWithType: NumberBaseConverting
        qualifiedName: NumberBaseConversionLibrary.NumberBaseConverting
      VB:
      - id: NumberBaseConversionLibrary.NumberBaseConverting
        name: NumberBaseConverting
        nameWithType: NumberBaseConverting
        qualifiedName: NumberBaseConversionLibrary.NumberBaseConverting
    isDefinition: true
    commentId: T:NumberBaseConversionLibrary.NumberBaseConverting
  NumberBaseConversionLibrary:
    name:
      CSharp:
      - name: NumberBaseConversionLibrary
        nameWithType: NumberBaseConversionLibrary
        qualifiedName: NumberBaseConversionLibrary
      VB:
      - name: NumberBaseConversionLibrary
        nameWithType: NumberBaseConversionLibrary
        qualifiedName: NumberBaseConversionLibrary
    isDefinition: true
    commentId: N:NumberBaseConversionLibrary
